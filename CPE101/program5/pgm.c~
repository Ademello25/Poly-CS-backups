#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <iostream>
#define BUFFER_SIZE 1024
#define MAX_SIZE 500
int STRING_SIZE = ((MAX_SIZE * MAX_SIZE) + 100);

void checkArgs(int argc);
void getCheckOption(int argc);
void openinFile(char *argv[]);
void openOutFile(char *argv[]);
int validity(char *argv[], int imgdetails[3], FILE* in);
void readData(FILE* in, int input[MAX_SIZE][MAX_SIZE], int imgdetails[3]);
void reformat(FILE* out,int input[MAX_SIZE][MAX_SIZE],int imgdetails[3]);
void sharpen(int input[MAX_SIZE][MAX_SIZE], int imgdetails[3]);
int smoothHelper(int input[MAX_SIZE][MAX_SIZE],int height,int width,int firstrow,int firstcol);
void smooth(int input[MAX_SIZE][MAX_SIZE], int imgdetails[3]);

/* checking to see if there are 4 arguments */
void checkArgs(int argc)
{
   if(argc != 4)
   {
      fprintf(stderr, "Usage : pgm OPTION [reformat|sharpen|smooth] inFile outFile\n");
      exit(EXIT_FAILURE);
   }
}
/* verify options */
void getCheckOption(int argc)
{
   const char reformat[] = "reformat";
   const char sharpen[] = "sharpen";
   const char smooth[] = "smooth";
   char input[20];
   
   scanf("%s", input);
   if((((strcmp(input, reformat)) || (strcmp(input, sharpen)) || (strcmp(input, smooth))) != 0))
   {
      fprintf(stderr, "pgm: %s is not a supported option.\n", input);
      fprintf(stderr, "Usage : pgm OPTION [reformat|sharpen|smooth] inFile outFile\n");
      exit(EXIT_FAILURE);
   }
}

/* checks if there is an error opening in File */
void openinFile(char *argv[])
{
   FILE *in;
   
   in = fopen(argv[2], "r");
   if(in == NULL)
   {
      fprintf(stderr, "pgm: Permission denied");
      exit(EXIT_FAILURE);
   }
}

void openOutFile(char *argv[])
{
   FILE *out;
   
   out = fopen(argv[3], "w");
   if(out == NULL)
   {
      fprintf(stderr, "pgm: Permission denied");
      exit(EXIT_FAILURE);
   }
}

int validity(char *argv[], int imgdetails[3], FILE* in)
{
   int count;
   unsigned long buffSize = BUFFER_SIZE;
   char* trashstring;
   char* comment = "#";
   
   
   /* checks if the Magic Number is correct */
   void openinFile(char *argv[]);
   
   trashstring = (char *) malloc (buffSize);
   if(80 != fgetc(in) || 50 != fgetc(in))
   {
      /* invalid magic number error message */
      fprintf(stderr, "pgm: Invalid PGM File magic number\n");
      exit(EXIT_FAILURE);
   }
   count = 0;
   while(( count < 3) && (fscanf(in, "%s", trashstring) != EOF))
   {
      fscanf(in, "%s", trashstring);
      if(trashstring[0]=='#')
      {
         getline(&trashstring, &buffSize,in);
      } 
      else if(strlen(trashstring) != strcspn(trashstring, comment))
      {
         strncpy(trashstring, trashstring, (strcspn(trashstring, comment)));
         imgdetails[count] = atoi(trashstring);
         getline(&trashstring, &buffSize,in);
         count ++;
      }
      else
      {
         imgdetails[count] = atoi(trashstring);
         count ++;
      }
   }
   if(count != 3)
   {
      
   }
   return (count == 3);
}

void readData(FILE* in, int input[MAX_SIZE][MAX_SIZE], int imgdetails[3])
{
   int height = imgdetails[1];
   int width = imgdetails[0];
   int i,o;
   
   for(i = 0; i < height ; i++)
   {
      for (o=0;o < width ; o++)
      {
         fscanf(in, "%d", &input[i][o]);
         
         if(input[i][o] > imgdetails[2])
         {
            input[i][o] = imgdetails[2];
         }
         else if(input[i][o] < 0)
         {
            input[i][o] = 0;
         }
      }
   }
   fclose(in);
}

void reformat(FILE* out,int input[MAX_SIZE][MAX_SIZE],int imgdetails[3])
{
   int i,o;
   int height = imgdetails[1];
   int width = imgdetails[0];
   fprintf(out, "P2\n");
   fprintf(out, "# CREATOR: CPE 101 pgm filter Version 2.0\n");
   fprintf(out, "%d %d %d\n", imgdetails[0], imgdetails[1], imgdetails[2]);
   
   for(i = 0; i < height ; i++)
   {
      for (o=0;o < width ; o++)
      {
         fprintf(out,"%d\n", input[i][o]);
      }
   }
}
 
void sharpen(int input[MAX_SIZE][MAX_SIZE], int imgdetails[3])
{
   int i,o, check;
   int height = imgdetails[1];
   int width = imgdetails[0];

   for(i = 0; i < height ; i++)
   {
      for (o=0;o < width ; o++)
      {
         check = (input[i][o])/2;
         if(input[i][o] > check)
         {
            if(input[i][o] == imgdetails[2])
            {
               input[i][o] += 0;
            }
            else
            {
               input[i][o] += 1;
            }
         }
         else
         {
            if(input[i][o] == 0)
            {
               input[i][o] += 0;
            }
            else
            {
               input[i][o] -= 1;
            }
         }
      }
   }
}
 
int smoothHelper(int input[MAX_SIZE][MAX_SIZE],int height,int width,int firstrow,int firstcol)
{
   int r, c, sum;
   
   for(r = firstrow; r < firstrow + height; r++)
   {
      for(c=firstcol; c <firstcol + width; c++)
      {
         sum += input[r][c];  
      }
   }
   sum /= (height * width);
   return sum;
}

void smooth(int input[MAX_SIZE][MAX_SIZE], int imgdetails[3])
{
   int pheight = imgdetails[1];
   int pwidth = imgdetails[0];
   int col1, row1, col2, row2, col3,row3;
   
   input[0][0]= smoothHelper(input, 2, 2, 0, 0);
   input[0][pwidth -1] = smoothHelper(input, 2, 2, 0, (pwidth-2));
   input[pheight-1][pwidth-1] = smoothHelper(input, 2, 2, (pheight -2), (pwidth-2));
   input[pheight-1][0] = smoothHelper(input, 2, 2, (pheight-2), 0);
   
   for(col1 = 0; col1 < (pwidth-2); col1++)
   {
      input[0][col1+1] = smoothHelper(input, 2, 3, 0, col1);
   }
   
   for (row1 = 0; row1 < (pheight-2); row1++)
   {
      input[row1+1][pwidth-1] = smoothHelper(input, 3, 2, row1, (pwidth-1));
   }
   
   for (col2 = 0; col2 < (pwidth-2); col2++)
   {
      input[pheight-1][col2+1] = smoothHelper(input, 2, 3, (pheight-1), col2);
   }
   
   for(row2 = 0; row2 <(pheight - 2); row2++)
   {
      input[row2+1][0] = smoothHelper(input, 3, 2, row2, 0);
   }
   
   for(row3 = 0;row3 < (pheight-3) ;row3++)
   {
      for(col3 = 0;col3 < (pwidth-3) ; col3++)
      {
         input[row3+1][col3+1] = smoothHelper(input, 3, 3, row3, col3);
      }
   }
   
}
 
int main (int argc, char * argv[])
{
   int imgdetails[3];
   FILE* in;
   FILE* out;
   int input[MAX_SIZE][MAX_SIZE];
   const char* option1 = "reformat";
   const char* option2 = "sharpen";
   
   checkArgs(argc);
   getCheckOption(argc);
   validity(argv, imgdetails, in);
   readData(in, input, imgdetails);
   openOutFile(argv);
   if(strcmp(argv[2], option1))
   {
      reformat(out, input, imgdetails);
   }
   else if(strcmp(argv[2], option2))
   {
      sharpen(input, imgdetails);
      reformat(out, input, imgdetails);
   }
   else
   {
      smooth(input, imgdetails);
      reformat(out, input, imgdetails);
   }
   return 0;
}









